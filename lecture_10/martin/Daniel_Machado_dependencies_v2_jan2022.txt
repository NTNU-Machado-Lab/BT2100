### Dependencies for transcriptome exercise

#################################################

### R, Bioconductor and R limma-voom ###

!conda install -c r r-base (R version 3.6.1)

# Install Bioconductor
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install(version = "3.10")

# R packages
BiocManager::install("limma")
BiocManager::install("edgeR")

#################################################

### Other programs ###

# HISAT2  krabbe: version 2.2.1
!conda install -c bioconda hisat2

# Subread package including featurecounts - krabbe: version 2.0.1
!conda install -c bioconda subread

# samtools krabbe: version 1.7
!conda install -c bioconda samtools

##################################################
##################################################

### Commands

##################################################

## Part 1: alignment (only one file) ##


forward_reads: LNCaP_red_rep6_1.fastq

reverse_reads: LNCaP_red_rep6_2.fastq

reference_genome: Human_hg20/genome_tran 

# run hisat2
!hisat2 -p 1 --dta -x reference_genome -1 forward_reads -2 reverse_reads -S LNCaP_rep6.sam 2>summary.txt

# convert .sam to .bam
!samtools view -bS LNCaP_rep6.sam > LNCaP_rep6.bam

# sort .bam
!samtools sort LNCaP_rep6.bam -o LNCaP_rep6_sorted.bam

##########################################################################

## Part 2: Make count-table

Reference_transcriptome: Homo_sapiens.GRCh38.84.gtf

# Counting with one file
!featureCounts -T 1 -t exon -g gene_id -O -a Reference_trans -o count-1smp.txt LNCaP_rep6_sorted.bam

# Counting with full seto of files

!featureCounts -T 1 -t exon -g gene_id -O -a /local/work/biocore/mol8008/RNA/Homo_sapiens.GRCh38.84.gtf -o count-table.txt LNCaP_rep1.bam LNCaP_rep2.bam LNCaP_rep3.bam LNCaP_rep4.bam LNCaP_rep5.bam LNCaP_rep6.bam RWPE_rep1.bam RWPE_rep2.bam RWPE_rep3.bam RWPE_rep4.bam RWPE_rep5.bam RWPE_rep6.bam

## Python script to clean count-table ##

# converts gene counts from featureCounts to table format usable for Limma-Voom
import os,sys
from numpy import *

def write_FILE(table,fname,delim='\t'):

        outfile = open(fname,'w')
        for line in table:
                outfile.write(delim.join([str(s) for s in line])+os.linesep)
        outfile.close()

def load_FILE(fname,spt='\t'):

    infile = open(fname,'r')
    lines = infile.readlines()
    lines = lines[1:]
    peaks = []
    for line in lines:
        cols = line.split(spt)
        cols[-1] = cols[-1].strip()
        ncols = hstack((cols[0],cols[6:]))
        peaks.append(ncols)
    peaks = array(peaks)

    return peaks

fname = sys.argv[1]
peaks = load_FILE(fname)
fname_out = fname[:-4]+'.tsv'
write_FILE(peaks,fname_out)

# Run file
!python fcnts2dseq.py count-table.txt

############################################################


# Part 3: Perform differential expression in R (mol8008/RNA/Voom_script_rem0_plots_jan2022.R)

##############################################################
### Script for differential expression analysis using Voom ###
##############################################################

### Load limma-package (which includes Voom) ###
library(limma)
library(edgeR)

### load data table ###
countTable = read.table("count-table.tsv",header=TRUE,row.names=1)   

###########################################################

### create condition ###
condition = factor( c("LNCaP","LNCaP","LNCaP","LNCaP","LNCaP","LNCaP",
			"RWPE","RWPE","RWPE","RWPE","RWPE","RWPE"))

### create design matrix ###
des = model.matrix(~-1+condition)
colnames(des) = levels(condition)

### define contrasts (which groups to compare) ###
cmat <- makeContrasts(LNCaP - RWPE, levels=des)

### Normalise count-table ###
dge <- DGEList(counts=countTable)
dge <- calcNormFactors(dge)

## make MDS plot ###
snames = colnames(countTable)
plotMDS(dge, col = as.numeric(condition)) # Group colors

## Cutoff cpm on dge 
cutoff <- 1
drop <- which(apply(cpm(dge), 1, max) < cutoff)
dge <- dge[-drop,] 
dim(dge) # number of genes left (21802)

### Fit voom model ###
v <- voom(dge,design=des)

###  Mean-Variance trend plot ###
v <- voom(dge,design=des,plot=T)

### fit model
fit <- lmFit(v,design=des)
fit <- contrasts.fit(fit, cmat)
fit <- eBayes(fit)

### find differentially expressed transcripts ###
a <- decideTests(fit,adjust.method="fdr", p.value=0.05, lfc=0)

### summary of result-table ###
sma = summary(a)
dmm <- dim(countTable)
res <- topTable(fit,n=dmm[1],coef=1)

### write table with results from differential expression ###
write.table(res,file="Voom_diffexp.txt",sep="\t",row.names=TRUE,col.names=TRUE,quote=FALSE)


###########################################################################


### New: MA plot ###
col <- c("blue","red")
values <- c(0.05,0.05)

#plotMA(fit)
#plotMA(fit, array=1)
plotMA(fit, values=values, hl.col=col)

plotMD(fit)

### New: Volcano plot ###

volcanoplot(fit,coef=2,highlight=8,names=fit$genes$NAME,main="LNCaP vs RWPE")
volcanoplot(fit,coef=1,highlight=8,names=fit$genes$NAME,main="LNCaP vs RWPE")
volcanoplot(fit,coef=0,highlight=8,names=fit$genes$NAME,main="LNCaP vs RWPE")

volcanoplot(fit,coef=1,highlight=20,names=fit$genes$NAME,main="LNCaP vs RWPE")
volcanoplot(fit,coef=1,highlight=20,names=rownames(fit$coefficients),main="LNCaP vs RWPE")

volcanoplot(fit, coef = 1, style = "p-value", highlight = 0, names = fit$genes$ID, hl.col="blue",
            xlab = "Log2 Fold Change", ylab = NULL, pch=16, cex=0.35, ...)


## Run R-script

!Rscript --vanilla Voom_script.r 
!Rscript --vanilla Voom_script_rem0_plots_jan2022.R

# Add gene-names to ensembl-ids

# Ensembl-ID to gene-name file: ENS_to_gene-names.txt

import fileinput

# First create the "Gene ID => Gene Symbol" look-up table:
#   Read the file containing Ensembl IDs and gene names line by line.
#   If the line contains TAB-separable columns, associate the gene ID in the first column with the gene name in the second
genesymbols = {}
with open("ENS_to_gene-names.txt") as genesfile:
    for line in genesfile.readlines():
        if ('\t' in line):
            id,name = line.strip().split('\t')
            genesymbols[id] = name

# Read a file line by line (from STDIN) and split each line into TAB-separated columns.
# Insert an extra column at the beginning for the gene symbol (by making a copy of the previous first column containing the gene ID).
# If the value in the first column is recognized as an ENSEMBL ID in my look-up table, replace it with the gene symbol.
# If not, then check if this is the header (first line) which must be fixed in an ad-hoc way by adding yet another column
n=0
for line in fileinput.input():
    n=n+1
    columns = line.strip().split('\t')
    columns.insert(0,columns[0])  # duplicate the first column
    if columns[0] in genesymbols:
        columns[0] = genesymbols[columns[0]] # replace ENSEMBL ID in first column with gene symbol
    else:
        if (n==1): # We assume that this is the header row
            columns[0]="gene_id"
            columns.insert(0,"gene_symbol")
    line = '\t'.join(columns)
    print(line)


# Run command
!python replace_ENS_with_gene_symbol_py3.py Voom_diffexp.txt > Voom_diffexp_gnms.txt

#######################

# MA and Volcano Plots - Python scripts (mol8008/RNA/plot_MA_Volcano_jan2022.py)


import sys,os
sys.path.append("/mnt/backup/users/mortenry/prs-apr2020/Functions/")
from ChipSeq_functions4 import *
from functions_histone import *
from CAGE_functions import *

def load_FILE(fname,spt='\t'):

    infile = open(fname,'r')
    lines = infile.readlines()
    peaks = []
    for line in lines:
        cols = line.split(spt)
        cols[-1] = cols[-1].strip()
        peaks.append(cols)
    peaks = array(peaks)

    return peaks

import os,sys

## Load diff-exp table from R
tbl = load_FILE('Voom_diffexp_gnms.txt') # cutoff=1 after normalization
hdr = tbl[0]
tbl = tbl[1:]
gnms = tbl[:,0]
ensid = tbl[:,1]
fc = tbl[:,2].astype(double)
avgx = tbl[:,3].astype(double)
pval = tbl[:,5].astype(double)
qval = tbl[:,6].astype(double)
mlogp = -log10(pval)
mlogq = -log10(qval)

###########################################################################

## up and downregulated genes

# q-value cutoff

ctf = 0.05
id0 = where(qval <= 0.05)[0]
id01 = where(fc > 0)[0]
id02 = where(fc < 0)[0]
id1 = intersect1d(id0,id01)
id2 = intersect1d(id0,id02)
str1 = 'q > '+str(ctf)
str2 = 'q < '+str(ctf)
idd = union1d(id1,id2)

######

# top N genes
NN = 100
id0 = arange(NN)
id01 = where(fc > 0)[0]
id02 = where(fc < 0)[0]
id1 = intersect1d(id0,id01)
id2 = intersect1d(id0,id02)
str1 = 'top '+str(NN)+' up'
str2 = 'top '+str(NN)+' down'
idd = union1d(id1,id2)

############################################################################

## Lecture plot
str1 = 'Up'
str2 = 'Down'

## MA plot

ff = figure()
ff.set_figwidth(12)
ff.set_figheight(10)

plot(avgx,fc,'k.',ms=2)
plot(avgx[id1],fc[id1],'r.',ms=10,label=str1)
plot(avgx[id2],fc[id2],'b.',ms=10,label=str2)

xlabel('Average log-expression',size=20)
ylabel('log-fold-change',size=20)

fsz = matplotlib.font_manager.FontProperties(size=20) 
legend(prop=fsz)

#plt.savefig('MA_plot.pdf',format='pdf')
plt.savefig('MA_plot_lecture.pdf',format='pdf')

#############################################################################

## Volcano Plot - p-value

ff = figure()
ff.set_figwidth(12)
ff.set_figheight(10)

plot(fc,mlogp,'k.',ms=2)
plot(fc[id1],mlogp[id1],'r.',ms=10,label=str1)
plot(fc[id2],mlogp[id2],'b.',ms=10,label=str2)

xlabel('Log2 Fold Change',size=20)
ylabel('-log10(P-Value)',size=20)

fsz = matplotlib.font_manager.FontProperties(size=20) 
legend(prop=fsz)

## add gene-names
for i in idd:
    tt = text(fc[i],mlogp[i],gnms[i],fontsize=8)

#plt.savefig('Volcano_plot.pdf',format='pdf')
plt.savefig('Volcano_plot_lecture.pdf',format='pdf')

#############################################################################
#############################################################################
#############################################################################
